{"version":3,"file":"mints.js","sourceRoot":"","sources":["../../src/mints.ts"],"names":[],"mappings":";AACA,OAAO,EACL,uCAAuC,EACvC,gCAAgC,EAChC,uBAAuB,EACvB,6BAA6B,EAC7B,kCAAkC,EAClC,SAAS,EACT,gBAAgB,GACjB,MAAM,mBAAmB,CAAC;AAM3B,OAAO,EAAE,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAC;AAEtE,OAAO,EAAE,kBAAkB,EAAE,MAAM,gBAAgB,CAAC;AAEpD;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,UAAU,GAAG,CACxB,UAAsB,EACtB,MAAc,EACd,MAAmB,EACc,EAAE;IACnC,MAAM,WAAW,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;IACvC,MAAM,MAAM,GAAG,WAAW,CAAC,SAAS,CAAC;IACrC,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,MAAM,YAAY,CAClC,UAAU,EACV,WAAW,CAAC,SAAS,EACrB,MAAM,CAAC,SAAS,EAChB,MAAM,CACP,CAAC;IACF,MAAM,kBAAkB,CAAC,UAAU,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,OAAO,EAAE,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;IAC7E,OAAO,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;AACvB,CAAC,CAAA,CAAC;AAQF;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG,CAC1B,UAAsB,EACtB,MAAiB,EACjB,SAAoB,EACpB,MAAmB,EACgB,EAAE;IACrC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,MAAM,aAAa,CAAC,UAAU,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;IAC9E,MAAM,EAAE,GAAG,IAAI,WAAW,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;IACzC,OAAO,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;AACnB,CAAC,CAAA,CAAC;AAEF;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,CAC3B,UAAsB,EACtB,MAAiB,EACjB,SAAoB,EACpB,MAAmB,EAC6B,EAAE;;IAClD,MAAM,MAAM,GAAG,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,MAAM,mCAAI,SAAS,CAAC;IAC3C,MAAM,GAAG,GAAG,6BAA6B,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;IAChE,OAAO;QACL;YACE,aAAa,CAAC,aAAa,CAAC;gBAC1B,UAAU,EAAE,SAAS;gBACrB,gBAAgB,EAAE,MAAM;gBACxB,KAAK,EAAE,SAAS;gBAChB,QAAQ,EAAE,MAAM,kCAAkC,CAAC,UAAU,CAAC;gBAC9D,SAAS,EAAE,gBAAgB;aAC5B,CAAC;YACF,gCAAgC,CAC9B,MAAM,EACN,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,QAAQ,mCAAI,CAAC,EACrB,SAAS,EACT,SAAS,CACV;YACD,uCAAuC,CAAC,SAAS,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,CAAC;YACvE,uBAAuB,CAAC,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,MAAM,mCAAI,CAAC,CAAC;SACrE;QACD,GAAG;KACJ,CAAC;AACJ,CAAC,CAAA,CAAC","sourcesContent":["import type { Wallet } from \"@project-serum/anchor/dist/cjs/provider\";\nimport {\n  createAssociatedTokenAccountInstruction,\n  createInitializeMint2Instruction,\n  createMintToInstruction,\n  getAssociatedTokenAddressSync,\n  getMinimumBalanceForRentExemptMint,\n  MINT_SIZE,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport type {\n  Connection,\n  PublicKey,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { Keypair, SystemProgram, Transaction } from \"@solana/web3.js\";\n\nimport { executeTransaction } from \"./transactions\";\n\n/**\n * Build and execute mint Tx\n * @param connection\n * @param wallet\n * @param config\n * @returns\n */\nexport const createMint = async (\n  connection: Connection,\n  wallet: Wallet,\n  config?: MintConfig\n): Promise<[PublicKey, PublicKey]> => {\n  const mintKeypair = Keypair.generate();\n  const mintId = mintKeypair.publicKey;\n  const [tx, ata] = await createMintTx(\n    connection,\n    mintKeypair.publicKey,\n    wallet.publicKey,\n    config\n  );\n  await executeTransaction(connection, tx, wallet, { signers: [mintKeypair] });\n  return [ata, mintId];\n};\n\nexport type MintConfig = {\n  target?: PublicKey;\n  amount?: number;\n  decimals?: number;\n};\n\n/**\n * Transaction for creating a mint\n * @param connection\n * @param mintId\n * @param authority\n * @param config\n * @returns\n */\nexport const createMintTx = async (\n  connection: Connection,\n  mintId: PublicKey,\n  authority: PublicKey,\n  config?: MintConfig\n): Promise<[Transaction, PublicKey]> => {\n  const [ixs, ata] = await createMintIxs(connection, mintId, authority, config);\n  const tx = new Transaction().add(...ixs);\n  return [tx, ata];\n};\n\n/**\n * Instructions for creating a mint\n * @param connection\n * @param mintId\n * @param authority\n * @param config\n * @returns\n */\nexport const createMintIxs = async (\n  connection: Connection,\n  mintId: PublicKey,\n  authority: PublicKey,\n  config?: MintConfig\n): Promise<[TransactionInstruction[], PublicKey]> => {\n  const target = config?.target ?? authority;\n  const ata = getAssociatedTokenAddressSync(mintId, target, true);\n  return [\n    [\n      SystemProgram.createAccount({\n        fromPubkey: authority,\n        newAccountPubkey: mintId,\n        space: MINT_SIZE,\n        lamports: await getMinimumBalanceForRentExemptMint(connection),\n        programId: TOKEN_PROGRAM_ID,\n      }),\n      createInitializeMint2Instruction(\n        mintId,\n        config?.decimals ?? 0,\n        authority,\n        authority\n      ),\n      createAssociatedTokenAccountInstruction(authority, ata, target, mintId),\n      createMintToInstruction(mintId, ata, authority, config?.amount ?? 1),\n    ],\n    ata,\n  ];\n};\n"]}