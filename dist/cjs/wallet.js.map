{"version":3,"file":"wallet.js","sourceRoot":"","sources":["../../src/wallet.ts"],"names":[],"mappings":";;;;AAGA;;;;GAIG;AACI,MAAM,WAAW,GAAG,CAAC,SAAoB,EAAU,EAAE,CAAC,CAAC;IAC5D,eAAe,EAAE,CAAO,EAAe,EAAE,EAAE,0DAAC,OAAA,IAAI,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAA,GAAA;IACjE,mBAAmB,EAAE,CAAO,GAAkB,EAAE,EAAE,0DAAC,OAAA,IAAI,OAAO,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAA,GAAA;IACzE,SAAS,EAAE,SAAS;CACrB,CAAC,CAAC;AAJU,QAAA,WAAW,eAIrB","sourcesContent":["import type { Wallet } from \"@project-serum/anchor/dist/cjs/provider\";\nimport type { PublicKey, Transaction } from \"@solana/web3.js\";\n\n/**\n * A utility for creating a wallet interface given a publicKey. This can be used when a wallet parameter is required but it will not need to sign\n * @param publicKey\n * @returns A wallet interface with empty sign methods\n */\nexport const emptyWallet = (publicKey: PublicKey): Wallet => ({\n  signTransaction: async (tx: Transaction) => new Promise(() => tx),\n  signAllTransactions: async (txs: Transaction[]) => new Promise(() => txs),\n  publicKey: publicKey,\n});\n"]}