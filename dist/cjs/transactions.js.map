{"version":3,"file":"transactions.js","sourceRoot":"","sources":["../../src/transactions.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Wallet } from \"@project-serum/anchor/dist/cjs/provider\";\nimport * as splToken from \"@solana/spl-token\";\nimport type {\n  Connection,\n  PublicKey,\n  SendTransactionError,\n  Signer,\n  Transaction,\n} from \"@solana/web3.js\";\nimport { sendAndConfirmRawTransaction } from \"@solana/web3.js\";\n\nimport { chunkArray } from \"./utils\";\n\n/**\n * Utility function for adding a find or init associated token account instruction to a transaction\n * Useful when using associated token accounts so you can be sure they are created before hand\n * @param transaction\n * @param connection\n * @param mint\n * @param owner\n * @param payer\n * @param allowOwnerOffCurve\n * @returns The associated token account ID that was found or will be created. This also adds the relevent instruction to create it to the transaction if not found\n */\nexport async function withFindOrInitAssociatedTokenAccount(\n  transaction: Transaction,\n  connection: Connection,\n  mint: PublicKey,\n  owner: PublicKey,\n  payer: PublicKey,\n  allowOwnerOffCurve?: boolean\n): Promise<PublicKey> {\n  const associatedAddress = await splToken.getAssociatedTokenAddress(\n    mint,\n    owner,\n    allowOwnerOffCurve\n  );\n  const account = await connection.getAccountInfo(associatedAddress);\n  if (!account) {\n    transaction.add(\n      splToken.createAssociatedTokenAccountInstruction(\n        payer,\n        associatedAddress,\n        owner,\n        mint\n      )\n    );\n  }\n  return associatedAddress;\n}\n\nexport async function executeTransaction(\n  connection: Connection,\n  tx: Transaction,\n  wallet: Wallet,\n  config?: { signers?: Signer[]; silent?: boolean }\n): Promise<string> {\n  tx.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n  tx.feePayer = wallet.publicKey;\n  await wallet.signTransaction(tx);\n  if (config?.signers) {\n    tx.partialSign(...(config?.signers ?? []));\n  }\n  try {\n    const txid = await sendAndConfirmRawTransaction(connection, tx.serialize());\n    return txid;\n  } catch (e) {\n    if (!config?.silent) {\n      handleError(e);\n    }\n    throw e;\n  }\n}\n\nexport async function executeTransactions<T = null>(\n  connection: Connection,\n  txs: Transaction[],\n  wallet: Wallet,\n  config?: {\n    signers?: Signer[];\n    batchSize?: number;\n    errorHandler?: (e: unknown) => T;\n  }\n): Promise<(string | null | T)[]> {\n  const latestBlockhash = (await connection.getLatestBlockhash()).blockhash;\n  const signedTxs = await wallet.signAllTransactions(\n    txs.map((tx) => {\n      tx.recentBlockhash = latestBlockhash;\n      tx.feePayer = wallet.publicKey;\n      if (config?.signers) {\n        tx.partialSign(...(config?.signers ?? []));\n      }\n      return tx;\n    })\n  );\n  const batchedTxs = chunkArray(\n    signedTxs,\n    config?.batchSize ?? signedTxs.length\n  );\n\n  const txids: (string | T | null)[] = [];\n  for (let i = 0; i < batchedTxs.length; i++) {\n    const batch = batchedTxs[i];\n    if (batch) {\n      const batchTxids = await Promise.all(\n        batch.map(async (tx) => {\n          try {\n            const txid = await sendAndConfirmRawTransaction(\n              connection,\n              tx.serialize()\n            );\n            return txid;\n          } catch (e) {\n            if (config?.errorHandler) {\n              return config?.errorHandler(e);\n            }\n            handleError(e);\n            return null;\n          }\n        })\n      );\n      txids.push(...batchTxids);\n    }\n  }\n  return txids;\n}\n\nexport const handleError = (e: unknown) => {\n  const message = (e as SendTransactionError).message ?? \"\";\n  const logs = (e as SendTransactionError).logs;\n  if (logs) {\n    console.log(logs, message);\n  } else {\n    console.log(e, message);\n  }\n};\n"]}