{"version":3,"file":"units.js","sourceRoot":"","sources":["../../src/units.ts"],"names":[],"mappings":";;;AAAA,kDAA2C;AAC3C,+CAAyC;AAEzC;;;;;GAKG;AACH,SAAgB,aAAa,CAAC,aAAqB,EAAE,QAAgB;IACnE,OAAO,IAAI,WAAE,CAAC,IAAI,wBAAS,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC7E,CAAC;AAFD,sCAEC;AAED;;;;;GAKG;AACH,SAAgB,aAAa,CAAC,aAAiB,EAAE,QAAgB;IAC/D,OAAO,IAAI,wBAAS,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;SAC3C,SAAS,CAAC,CAAC,QAAQ,CAAC;SACpB,QAAQ,EAAE,CAAC;AAChB,CAAC;AAJD,sCAIC;AAED;;;;;;GAMG;AACH,SAAgB,cAAc,CAC5B,YAAgC,EAChC,QAA4B,EAC5B,YAAoB;IAEpB,IAAI,CAAC,YAAY;QAAE,OAAO,YAAY,CAAC;IACvC,MAAM,aAAa,GAAG,YAAY,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IACrD,IAAI;QACF,IAAI,IAAI,wBAAS,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE;YAC3D,OAAO,IAAI,wBAAS,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;iBAChD,SAAS,CAAC,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,CAAC;iBAC3B,QAAQ,CAAC;gBACR,cAAc,EAAE,EAAE;gBAClB,gBAAgB,EAAE,GAAG;aACtB,CAAC;iBACD,MAAM,CAAC,aAAa,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;SACtE;QACD,OAAO,YAAY,CAAC;KACrB;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,YAAY,CAAC;KACrB;AACH,CAAC;AArBD,wCAqBC;AAED;;;;;;GAMG;AACH,SAAgB,aAAa,CAC3B,aAAiC,EACjC,QAA4B,EAC5B,YAAoB;IAEpB,IAAI,CAAC,aAAa;QAAE,OAAO,GAAG,CAAC;IAC/B,MAAM,aAAa,GAAG,aAAa,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IACtD,IAAI;QACF,IAAI,IAAI,wBAAS,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE;YAC5D,OAAO,IAAI,wBAAS,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;iBACjD,SAAS,CAAC,QAAQ,IAAI,CAAC,CAAC;iBACxB,OAAO,CAAC,CAAC,EAAE,wBAAS,CAAC,WAAW,CAAC;iBACjC,MAAM,CAAC,aAAa,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;SACtE;QACD,OAAO,YAAY,CAAC;KACrB;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,YAAY,CAAC;KACrB;AACH,CAAC;AAlBD,sCAkBC;AAED;;;;;GAKG;AACI,MAAM,KAAK,GAAG,CAAC,CAAqC,EAAa,EAAE;IACxE,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,SAAS;QAAE,OAAO,IAAI,CAAC;IAC/C,IAAI;QACF,OAAO,IAAI,WAAE,CAAC,CAAC,CAAC,CAAC;KAClB;IAAC,WAAM;QACN,OAAO,IAAI,CAAC;KACb;AACH,CAAC,CAAC;AAPW,QAAA,KAAK,SAOhB","sourcesContent":["import { BN } from \"@project-serum/anchor\";\nimport { BigNumber } from \"bignumber.js\";\n\n/**\n * Convert decimals to natural amount\n * @param decimalAmount number\n * @param decimals number\n * @returns natural amount\n */\nexport function naturalAmount(decimalAmount: number, decimals: number): BN {\n  return new BN(new BigNumber(decimalAmount).shiftedBy(decimals).toString());\n}\n\n/**\n * Convert natural amount to decimals\n * @param decimalAmount number\n * @param decimals number\n * @returns natural amount\n */\nexport function decimalAmount(naturalAmount: BN, decimals: number): number {\n  return new BigNumber(naturalAmount.toString())\n    .shiftedBy(-decimals)\n    .toNumber();\n}\n\n/**\n * Format a string stored input value in the input\n * @param stringAmount State stored string value\n * @param decimals Decimals to shift by\n * @param defaultValue Fallback if the provided string is not a number\n * @returns The formatted inputted to display\n */\nexport function tryFormatInput(\n  stringAmount: string | undefined,\n  decimals: number | undefined,\n  defaultValue: string\n): string {\n  if (!stringAmount) return defaultValue;\n  const trailingZeros = stringAmount.match(/\\.(0+)?$/);\n  try {\n    if (new BigNumber(stringAmount.replace(\",\", \"\")).isFinite()) {\n      return new BigNumber(stringAmount.replace(\",\", \"\"))\n        .shiftedBy(-(decimals || 0))\n        .toFormat({\n          groupSeparator: \"\",\n          decimalSeparator: \".\",\n        })\n        .concat(trailingZeros && trailingZeros[0] ? trailingZeros[0] : \"\");\n    }\n    return defaultValue;\n  } catch (e) {\n    return defaultValue;\n  }\n}\n\n/**\n * Parse a string input state value from an input\n * @param stringAmount String input value\n * @param decimals Decimals to shift by\n * @param defaultValue Fallback if the provided string is not a number\n * @returns The the value to store in state for the input\n */\nexport function tryParseInput(\n  stringDecimal: string | undefined,\n  decimals: number | undefined,\n  defaultValue: string\n): string {\n  if (!stringDecimal) return \"0\";\n  const trailingZeros = stringDecimal.match(/\\.(0+)?$/);\n  try {\n    if (new BigNumber(stringDecimal.replace(\",\", \"\")).isFinite()) {\n      return new BigNumber(stringDecimal.replace(\",\", \"\"))\n        .shiftedBy(decimals || 0)\n        .toFixed(0, BigNumber.ROUND_FLOOR)\n        .concat(trailingZeros && trailingZeros[0] ? trailingZeros[0] : \"\");\n    }\n    return defaultValue;\n  } catch (e) {\n    return defaultValue;\n  }\n}\n\n/**\n * Try to convert value to BN\n * @param stringAmount\n * @param defaultValue\n * @returns\n */\nexport const tryBN = (n: number | string | null | undefined): BN | null => {\n  if (n === null || n === undefined) return null;\n  try {\n    return new BN(n);\n  } catch {\n    return null;\n  }\n};\n"]}