{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":";;;AAAO,MAAM,aAAa,GAAG,CAAC,GAAW,EAAE,IAAY,EAAE,EAAE;IACzD,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI;QAAE,OAAO,IAAI,CAAC;IAC/B,MAAM,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,MAAM,GAAG,IAAI,GAAG,WAAW,CAAC,CAAC,CAAC;IAC7D,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC;AAJW,QAAA,aAAa,iBAIxB;AAEK,MAAM,UAAU,GAAG,CAAC,KAAoC,EAAU,EAAE;IACzE,IAAI,CAAC,KAAK;QAAE,OAAO,EAAE,CAAC;IACtB,OAAO,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AAC5D,CAAC,CAAC;AAHW,QAAA,UAAU,cAGrB;AAEK,MAAM,SAAS,GAAG,CAAC,GAAW,EAAE,EAAE;IACvC,OAAO,GAAG;SACP,KAAK,CAAC,GAAG,CAAC;SACV,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;SAClD,IAAI,CAAC,EAAE,CAAC,CAAC;AACd,CAAC,CAAC;AALW,QAAA,SAAS,aAKpB;AAEK,MAAM,qBAAqB,GAAG,CAAC,KAAa,EAAE,EAAE;IACrD,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AACjE,CAAC,CAAC;AAFW,QAAA,qBAAqB,yBAEhC;AAEK,MAAM,UAAU,GAAG,CAAI,GAAQ,EAAE,IAAY,EAAS,EAAE,CAC7D,GAAG,CAAC,MAAM,GAAG,IAAI;IACf,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,GAAG,IAAA,kBAAU,EAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AAHC,QAAA,UAAU,cAGX;AAEL,MAAM,WAAW,GAAG,CAAC,CAAS,EAAE,OAAe,EAAE,EAAE;IACxD,OAAO,GAAG,CAAC,GACT,OAAO,KAAK,cAAc,IAAI,OAAO,KAAK,SAAS;QACjD,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,WAAW,OAAO,EAAE;QACpD,CAAC,CAAC,EACN,EAAE,CAAC;AACL,CAAC,CAAC;AANW,QAAA,WAAW,eAMtB","sourcesContent":["export const getQueryParam = (url: string, name: string) => {\n  if (!url || !name) return null;\n  const q = url.match(new RegExp(\"[?&]\" + name + \"=([^&#]*)\"));\n  return q && q[1];\n};\n\nexport const firstParam = (param: string | string[] | undefined): string => {\n  if (!param) return \"\";\n  return typeof param === \"string\" ? param : param[0] || \"\";\n};\n\nexport const camelCase = (str: string) => {\n  return str\n    .split(\" \")\n    .map((x) => x.charAt(0).toUpperCase() + x.slice(1))\n    .join(\"\");\n};\n\nexport const capitalizeFirstLetter = (value: string) => {\n  return value[0] ? value[0].toUpperCase() + value.slice(1) : \"\";\n};\n\nexport const chunkArray = <T>(arr: T[], size: number): T[][] =>\n  arr.length > size\n    ? [arr.slice(0, size), ...chunkArray(arr.slice(size), size)]\n    : [arr];\n\nexport const withCluster = (s: string, cluster: string) => {\n  return `${s}${\n    cluster !== \"mainnet-beta\" && cluster !== \"mainnet\"\n      ? `${s.includes(\"?\") ? \"&\" : \"?\"}cluster=${cluster}`\n      : \"\"\n  }`;\n};\n"]}